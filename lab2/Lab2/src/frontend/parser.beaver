// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;


/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */
Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import Imports
	|
	;
	
Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations
		|
		;
Declaration = FunctionDeclaration
		| FieldDeclaration
		| TypeDeclaration
		;
		
FunctionDeclaration = AccessibilitySpecifier TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY;

FieldDeclaration = AccessibilitySpecifier TYPE ID SEMICOLON;

TypeDeclaration = AccessibilitySpecifier TYPE ID EQL STRING_LITERAL SEMICOLON;

AccessibilitySpecifier = PUBLIC 
					|
					;
					
TypeName = PrimitiveType 
	| ArrayType
	| ID
	;
	
PrimitiveType= VOID
	| BOOLEAN
	| INT 
	;
	
ArrayType= ArrayType LBRACKET RBRACKET
	| PrimitiveType LBRACKET RBRACKET
	| ID LBRACKET RBRACKET
	;
	
Parameter = TypeName ID;

ParameterList= NonEmptyParameterList
		|
		;
		
NonEmptyParameterList = Parameter COMMA NonEmptyParameterList
			| Parameter
			;
			
StatementList= Statement StatementList
		|
		;
			
Statement= TypeName ID SEMICOLON
	| LCURLY StatementList RCURLY
	| IF LPAREN Expression RPAREN Statement
	| IF LPAREN Expression RPAREN Statement ELSE Statement
	| WHILE LPAREN Expression RPAREN Statement
	| BREAK SEMICOLON
	| RETURN SEMICOLON
	| RETURN Expression SEMICOLON
	| Expression SEMICOLON
	;
	
Expression= Assignment 
	| RHSExpression
	;
ExpressionList= NonEmptyExpressionList
		|
		;	
NonEmptyExpressionList = Expression COMMA NonEmptyExpressionList
					| Expression
					; 
Assignment = LHSExpression EQL Expression;
LHSExpression = ID
		| ArrayAccess
		;
		
RHSExpression = ArithmeticExpression
		| ArithmeticExpression ComparisonOperator ArithmeticExpression
		;
		
ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				| Term
				;

ArrayAccess = ID LBRACKET Expression RBRACKET
		| ArrayAccess LBRACKET Expression RBRACKET;

ComparisonOperator = EQEQ 
				| NEQ
				| LT
				| LEQ
				| GT
				| GEQ
				;
				
AdditiveOperator = PLUS
				| MINUS
				;
				
MultiplicativeOperator = TIMES 
					| DIV
					| MOD
					;
					
Term = Term MultiplicativeOperator Factor
	| Factor
	;
	
Factor = MINUS Factor 
	| PrimaryExpression
	;
	
PrimaryExpression = LHSExpression
			| FunctionCall
			| ArrayExpression
			| STRING_LITERAL
			| INT_LITERAL
			| BooleanLiteral
			| LPAREN Expression RPAREN
			;
			
FunctionCall = ID LPAREN ExpressionList RPAREN;

ArrayExpression = LBRACKET NonEmptyExpressionList RBRACKET;

BooleanLiteral = TRUE
			| FALSE
			;
			
/**/